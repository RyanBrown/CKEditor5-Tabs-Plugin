@use 'sass:color';
@use 'sass:math';
@use 'sass:meta';

$primary: #266de2;
$secondary: #6c757d;
$warning: #fbcf35;
$error: #c61a1a;
$success: #107500;
$info: #32c1ff;
$help: #bb6bd9;
$plain: #495057;

:root {
  --primary: #266de2;
  --secondary: #6c757d;
  --warning: #fbcf35;
  --error: #c61a1a;
  --success: #107500;
  --info: #32c1ff;
  --help: #bb6bd9;
  --plain: #495057;

  // ZeroHeight Variables
  --core-water-leaf: #96e8e3;
  --core-tropical-blue: #c2d9fe;
  --core-pale-lavender: #e6cefd;
  --accent-canary-yellow: #fff305;
  --accent-denim: #165dd0;
  --accent-grenadier: #cd4400;
  --accent-hawks-blue: #dbe8ff;
  --accent-jordy-blue: #7da6ed;
  --accent-navy-blue: #266be3;
  --accent-pink-orange: #ff9966;
  --accent-zircon: #f5f8ff;
  --tertiary-cornflower-blue: #629efe;
  --tertiary-orchid: #d584e1;
  --tertiary-rich-lilac: #bb69d8;
  --tertiary-viking: #64d8d0;
  --neutral-athens-gray: #dedede;
  --neutral-black: #292929;
  --neutral-dove-gray: #757575;
  --neutral-gallery: #f0f0f0;
  --neutral-mountain-mist: #949494;
  --neutral-steel: #666666;
  --neutral-white: #ffffff;
  --error: #c71a1a;
  --error-background: #fdebec;
  --error-shadow: #ed3f3f;
  --warning: #fbcf35;
  --warning-background: #ffefd2;
  --success: #107400;
  --success-background: #e6f6e1;
  --success-shadow: #0fab01;
  --info: #165dd0;
  --info-background: #dbe8ff;
  --background-body: var(--neutral-white);
  --border-general: var(--neutral-dove-gray);
  --font-color-base: var(--neutral-black);
  --font-family-base: 'FSThriveElliotWeb-Regular', sans-serif;
  --font-family-bold: 'FSThriveElliotWeb-Bold', sans-serif;
  --font-family-heavy: 'FSThriveElliotWeb-Heavy', sans-serif;
  --font-family-light: 'FSThriveElliotWeb-Light', sans-serif;
  --font-family-mono: 'Courier New', Courier, monospace;
  --font-size-x-sm: 0.75rem; // 12px
  --font-size-sm: 0.875rem; // 14px
  --font-size-base: 1rem; // 16px
  --font-size-lg: 1.125rem; // 18px
  --font-size-xl: 1.25rem; // 20px
  --font-size-xxl: 2rem; // 32px
  --anchor-color: var(--accent-denim);
  --spacing-xs: 0.125rem;
  --spacing-s: 0.25rem;
  --spacing-m: 0.5rem;
  --spacing-l: 1rem;
  --spacing-xl: 1.5rem;
  --spacing-xxl: 2rem;
  --spacing-xxxl: 2.5rem;
  --spacing-xxxxl: 5rem;
  --container-max-width: 100rem;
  --paragraph-margin-bottom: var(--spacing-m);
  --paragraph-max-width: 37.5rem;

  --focus-state: none;

  --font-weight-light: 100;
  --font-weight-normal: 400;
  --font-weight-bold: 700;

  --border-radius-base: 4px;
  --border-radius-lg: 10px;

  --maskbg: rgba(239, 239, 239, 0.8);
  --font-awesome: 'Font Awesome 6 Free';
  --button-outlined-border: 2px solid;

  --toggle-button-default: #1c1e20;

  // Media Query Sizes = 992px / 768px / 576px
  --media-query-992: 62rem;
  --media-query-768: 48rem;
  --media-query-576: 36rem;

  // Colors generated https://colors.eva.design/
  // Needed to fill in missing colors from ZeroHeight
  --gray-50: #f9fafb;
  --gray-100: #f0f0f0;
  --gray-150: #f6f9ff;
  --gray-200: #e9ecef;
  --gray-300: #dedede;
  --gray-400: #ced4da;
  --gray-500: #adb5bd;
  --gray-600: #6c757d;
  --gray-700: #495057;
  --gray-800: #343a40;
  --gray-900: #292929;

  // https://mdigi.tools/
  // https://mdigi.tools/darken-color/
  // https://mdigi.tools/lighten-color/

  // Hover state colors = 10% darker than default color
  // Active state colors = 15% darker than default color
  // Focus state colors = 40% rgba of default color
  // Outline hover = 16% rgba of default color
  // Outline active = 10% rgba of default color

  @function hover-color($color) {
    $darken: color.adjust($color, $lightness: -10%);
    @return $darken; // Return the adjusted color directly
  }

  @function active-color($color) {
    $darken: color.adjust($color, $lightness: -15%);
    @return $darken;
  }

  @function focus-color($color) {
    $rgba: color.scale($color, $alpha: -60%); // Reduce alpha by 60%
    @return $rgba;
  }

  @function outline-hover-color($color) {
    $rgba: color.scale($color, $alpha: -84%); // Reduce alpha by 84%
    @return $rgba;
  }

  @function outline-hover-active-color($color) {
    $rgba: color.scale($color, $alpha: -90%); // Reduce alpha by 90%
    @return $rgba;
  }

  --primary: #{$primary};
  --primary-hover: #{hover-color($primary)};
  --primary-active: #{active-color($primary)};
  --primary-focus: #{focus-color($primary)};
  --primary-outline-hover: #{outline-hover-color($primary)};
  --primary-outline-active: #{outline-hover-active-color($primary)};

  --secondary: #{$secondary};
  --secondary-hover: #{hover-color($secondary)};
  --secondary-active: #{active-color($secondary)};
  --secondary-focus: #{focus-color($secondary)};
  --secondary-outline-hover: #{outline-hover-color($secondary)};
  --secondary-outline-active: #{outline-hover-active-color($secondary)};

  --warning: #{$warning};
  --warning-hover: #{hover-color($warning)};
  --warning-active: #{active-color($warning)};
  --warning-focus: #{focus-color($warning)};
  --warning-outline-hover: #{outline-hover-color($warning)};
  --warning-outline-active: #{outline-hover-active-color($warning)};

  --error: #{$error};
  --error-hover: #{hover-color($error)};
  --error-active: #{active-color($error)};
  --error-focus: #{focus-color($error)};
  --error-outline-hover: #{outline-hover-color($error)};
  --error-outline-active: #{outline-hover-active-color($error)};

  --success: #{$success};
  --success-hover: #{hover-color($success)};
  --success-active: #{active-color($success)};
  --success-focus: #{focus-color($success)};
  --success-outline-hover: #{outline-hover-color($success)};
  --success-outline-active: #{outline-hover-active-color($success)};

  --info: #{$info};
  --info-hover: #{hover-color($info)};
  --info-active: #{active-color($info)};
  --info-focus: #{focus-color($info)};
  --info-outline-hover: #{outline-hover-color($info)};
  --info-outline-active: #{outline-hover-active-color($info)};

  --help: #{$help};
  --help-hover: #{hover-color($help)};
  --help-active: #{active-color($help)};
  --help-focus: #{focus-color($help)};
  --help-outline-hover: #{outline-hover-color($help)};
  --help-outline-active: #{outline-hover-active-color($help)};

  --plain: #{$plain};
  --plain-hover: #{hover-color($plain)};
  --plain-active: #{active-color($plain)};
  --plain-focus: #{focus-color($plain)};
  --plain-outline-hover: #{outline-hover-color($plain)};
  --plain-outline-active: #{outline-hover-active-color($plain)};
}

// Mixins
// ================================================================================================

// Convert pixels to rems
@function toRem($value) {

  // Ensure the value is numeric or in pixels
  @if math.is-unitless($value) or math.unit($value)=='px' {
    @return math.div($value, 16) * 1rem;
  }

  // Throw an error for unsupported units
  @error "The value must be unitless or in 'px'. Given: '#{math.unit($value)}'";
}

// Mixin for component box shadow
@mixin component-box-shadow {
  box-shadow: 0 0.1875rem 0.5rem rgba(0, 0, 0, 0.15);
}

// Animations
// ================================================================================================

@keyframes p-component-overlay-enter-animation {
  from {
    background-color: transparent;
  }

  to {
    background-color: var(--maskbg);
  }
}

@keyframes p-component-overlay-leave-animation {
  from {
    background-color: var(--maskbg);
  }

  to {
    background-color: transparent;
  }
}